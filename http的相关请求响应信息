        HTTP又称作超文本传输协议,主要用于网络传输超文本数据到本地浏览器的传送协议

一、先了解一下域名的组成？
1.URL: 统一资源定位符,即网页地址,是互联网上标准的资源访问地址,每个文件都有一个唯一的url

2.域名地址的组成： http://www.baidu.com/index.html;user?id=5#comment

http:  //    www.   baidu.com    :    8080      /       index.html   ;     user           ?     id=5           #comment         
协议         子域名   主域名            端口号    根目录     访问路径path       查询参数params       查询条件query    #后面是锚点,用于定位页面内部的下拉位置
 
 
3.当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域.

-----------------------------------&  二  &------------------------------------------------------------

二、HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间的通信流程,主要分为7个步骤：

（1）建立TCP连接
    在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，
即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能
，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80

（2）Web浏览器向Web服务器发送请求命令
    一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令
例如：GET/sample/hello.jsp HTTP/1.1

（3）Web浏览器发送请求头信息
    浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该
头信息的发送。

（4）Web服务器应答
客户机向服务器发出请求后，服务器会向客户机回送应答，如:HTTP/1.1 200 OK，应答的第一部分是协议的版本号和应答状态码

（5）Web服务器发送应答头信息
    正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。

（6）Web服务器向浏览器发送数据
    Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格
式发送用户所请求的实际数据

（7）Web服务器关闭TCP连接
    一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，但是如果浏览器或者服务器在其头信息加入了这行代码：
                                Connection:keep-alive
则TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时
间，还节约了网络带宽。

-------------------------------&  三  &---------------------------------------------------------------------

三、HTTP请求信息由3部分组成：

  （1）请求行（请求方法 URI协议/版本）
  GET和POST是最常见的HTTP请求方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。不过，
当前的大多数浏览器只支持GET和POST

  （2）请求头(Reuest Header)
  常见的请求头信息：
    User-Agent：产生请求的浏览器类型。user-Agent是浏览器标识的意思，如果ua设为无，网页会认为是一个未知设备在请求访问，
  因此就默认推送简版到设备。 如果改为默认/android/iphone时，网页会识别您的设备为安卓/苹果，因此就推送触屏版了。后续爬虫的时候
  可以伪装 user agent 来回避某些侦测特定浏览器才能读取的网站.

    accept：浏览器通过这个头告诉服务器，它所支持的数据类型。如：text/html, image/jpeg

    accept-Charset：浏览器通过这个头告诉服务器，它支持哪种字符集。

    accept-encoding：浏览器通过这个头告诉服务器，它支持哪种压缩格式。

    accept-language：浏览器通过这个头告诉服务器，它的语言环境。

    host：浏览器通过这个头告诉服务器，它想访问哪台主机。

    if-modified-since：浏览器通过这个头告诉服务器，缓存数据的时间

    referer：浏览器通过这个头告诉服务器，客户机是哪个页面来的(防盗链)。

    Connection：浏览器通过这个头告诉服务器，请求完后是断开链接还是维持链接。

    Cookie： 客户机通过这个头告诉服务器，可以向服务器带数据。客户端的Cookie就是通过
  这个报文头属性传给服务端的哦

    (3) 请求体：
    post方法中，会把数据以key value形式发送请求

    (4) 空行：
     发送回车符和换行符，通知服务器以下不再有请求头



-------------------------------&  四  &---------------------------------------------------------------------


四、服务器返回的响应一般由三部分组成

1.响应行：主要包括报文的协议及版本 状态码以及状态描述
    如：HTTP/1.1 200 OK
 
    (1) 状态码类型：


    1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态代码。
    100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 
    101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。

    http状态返回代码 2xx （成功）表示成功处理了请求的状态代码。
    200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。
    201 （已创建） 请求成功并且服务器创建了新的资源。
    202 （已接受） 服务器已接受请求，但尚未处理。
    203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。
    204 （无内容） 服务器成功处理了请求，但没有返回任何内容。
    205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。
    206 （部分内容） 服务器成功处理了部分 GET 请求。

    http状态返回代码 3xx （重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。
    300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。
    301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。
    302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。
    303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。
    304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。
    305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。
    307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。

    http状态返回代码 4xx（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。

    400 （错误请求） 服务器不理解请求的语法。
    401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。
    403 （禁止） 服务器拒绝请求。404 （未找到） 服务器找不到请求的网页。
    405 （方法禁用） 禁用请求中指定的方法。
    406 （不接受） 无法使用请求的内容特性响应请求的网页。
    407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。
    408 （请求超时） 服务器等候请求时发生超时。
    409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。
    410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。
    411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。
    412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。
    413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。
    414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。
    415 （不支持的媒体类型） 请求的格式不受请求页面的支持。
    416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。
    417 （未满足期望值） 服务器未满足"期望"请求标头字段的要求。

    http状态返回代码 5xx（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。

    500 （服务器内部错误） 服务器遇到错误，无法完成请求。
    501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。
    502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。
    503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。
    504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。
    505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。

    (2) 最常见的状态码：

    200 OK            你最希望看到的，即处理成功！

    303 See Other     我把你redirect到其它的页面，目标的URL通过响应报文头的Location告诉你。

    304 Not Modified  告诉客户端，你请求的这个资源至你上次取得后，并没有更改，你直接用你本地的缓存吧，
  我很忙哦，你能不能少来烦我啊！

    404 Not Found      你最不希望看到的，即找不到页面。如你在google上找到一个页面，点击这个链接返回404，
  表示这个页面已经被网站删除了，google那边的记录只是美好的回忆。 

    500 Internal Server Error  看到这个错误，你就应该查查服务端的日志了，肯定抛出了一堆异常，别睡了，
  起来改BUG去吧！ 


2.响应头，和请求头一样包含很多信息，列如服务器类型，日期时间，内容类型和长度等
    http响应头：

    location：服务器通过这个头告诉浏览器跳到哪里。
    server：服务器通过这个头告诉浏览器服务器的型号。
    content-encoding：服务器通过这个头告诉浏览器数据的压缩格式。
    content-length：服务器通过这个头告诉浏览器回送数据的长度。
    content-language：服务器通过这个头告诉浏览器语言环境
    content-type：服务器通过这个头告诉浏览器回送数据的类型。
    refresh：服务器通过这个头告诉浏览器定时刷新。
    content-disposition：服务器通过这个头告诉浏览器以下载方式打开数据。
    transfer-encoding：服务器通过这个头告诉浏览器数据是以分块方式回送的

    以下三个表示服务器通过这个头告诉浏览器不要缓存

    expires：-1
    cache-control：no-cache
    pragma：no-cache

3.空行：响应头和响应体由空行连接。

4.响应体，也就是响应正文,响应消息的响应体是一个html文档。浏览器可以直接识别这个html文件。

















